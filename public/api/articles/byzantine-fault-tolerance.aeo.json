[
  {
    "@context": "https://schema.org",
    "@type": "ImageObject",
    "name": "Byzantine Fault Tolerance Network Architecture Diagram",
    "description": "Comprehensive diagram illustrating BFT network structure with honest and byzantine nodes, showing consensus threshold requirements and message flow patterns in blockchain networks",
    "contentUrl": "https://shapkarin.me/api/articles/byzantine-fault-tolerance-0.svg",
    "encodingFormat": "image/svg+xml",
    "learningResourceType": "diagram",
    "educationalUse": ["learning", "presentation"],
    "about": {
      "@type": "Thing",
      "name": "Byzantine Fault Tolerance Network Architecture"
    }
  },
  {
    "@context": "https://schema.org",
    "@type": "ImageObject",
    "name": "pBFT Consensus Algorithm Sequence Diagram",
    "description": "Step-by-step sequence diagram showing the Practical Byzantine Fault Tolerance consensus process with pre-prepare, prepare, and commit phases between primary and backup nodes",
    "contentUrl": "https://shapkarin.me/api/articles/byzantine-fault-tolerance-1.svg",
    "encodingFormat": "image/svg+xml",
    "learningResourceType": "diagram",
    "educationalUse": ["learning", "presentation"],
    "about": {
      "@type": "Thing",
      "name": "pBFT Consensus Algorithm Flow"
    }
  },
  {
  "title": "Byzantine Fault Tolerance in Blockchain: Complete Guide to BFT for Ethereum & EVM Chains",
  "meta": {
    "description": "Master Byzantine Fault Tolerance (BFT) in blockchain technology. Learn how BFT algorithms secure Ethereum, EVM-compatible chains, and decentralized networks against malicious attacks with comprehensive examples and implementations.",
    "keywords": [
      "byzantine fault tolerance",
      "BFT blockchain",
      "ethereum consensus",
      "practical byzantine fault tolerance",
      "pBFT algorithm",
      "blockchain security",
      "ethereum 2.0 consensus",
      "casper ffg",
      "gasper consensus",
      "ethereum validators",
      "blockchain nodes",
      "distributed consensus",
      "fault tolerance algorithms",
      "malicious nodes",
      "blockchain consensus mechanisms",
      "ethereum pos",
      "proof of stake",
      "blockchain attacks",
      "double spending prevention",
      "51% attack prevention",
      "sybil attack",
      "EVM compatible chains",
      "polygon consensus",
      "arbitrum consensus",
      "optimism consensus",
      "avalanche consensus",
      "byzantine generals problem",
      "consensus algorithms",
      "blockchain scalability",
      "decentralized consensus",
      "network security",
      "blockchain resilience",
      "validator consensus",
      "ethereum staking",
      "blockchain governance",
      "distributed systems security",
      "tendermint bft",
      "hotstuff consensus",
      "ibft istanbul",
      "blockchain finality",
      "slashing conditions",
      "nothing at stake",
      "long range attack",
      "blockchain economics",
      "validator penalties",
      "consensus threshold",
      "binance smart chain consensus",
      "cosmos hub consensus",
      "solana consensus",
      "layer 2 consensus",
      "bft security analysis",
      "blockchain performance",
      "distributed ledger technology"
    ],
    "lastUpdated": "2025-01-27",
    "readingTime": "28 minutes",
    "category": "Blockchain Security",
    "difficulty": "Intermediate to Advanced",
    "author": "Iurii Shapkarin",
    "canonicalUrl": "https://shapkarin.me/articles/byzantine-fault-tolerance",
    "language": "en",
    "publishDate": "2025-01-27"
  },
  "structured_data": {
    "@context": "https://schema.org",
    "@type": "Article",
    "headline": "Byzantine Fault Tolerance in Blockchain: Complete Guide to BFT for Ethereum & EVM Chains",
    "description": "Master Byzantine Fault Tolerance (BFT) in blockchain technology. Learn how BFT algorithms secure Ethereum, EVM-compatible chains, and decentralized networks against malicious attacks with comprehensive examples and implementations.",
    "author": {
      "@type": "Person",
      "name": "Iurii Shapkarin",
      "alternateName": "Yury Shapkarin",
      "url": "https://shapkarin.me"
    },
    "datePublished": "2025-01-27",
    "dateModified": "2025-01-27",
    "mainEntityOfPage": {
      "@type": "WebPage",
      "@id": "https://shapkarin.me/articles/byzantine-fault-tolerance"
    },
    "publisher": {
      "@type": "Person",
      "name": "Iurii Shapkarin",
      "alternateName": "Yury Shapkarin",
      "logo": {
        "@type": "ImageObject",
        "url": "https://shapkarin.me/logo.jpg"
      }
    }
  },
  "featured_snippet": {
    "question": "What is Byzantine Fault Tolerance (BFT) in blockchain?",
    "answer": "Byzantine Fault Tolerance (BFT) is a distributed computing concept that enables blockchain networks to continue operating correctly even when some nodes fail or act maliciously. BFT algorithms ensure honest nodes can reach consensus despite byzantine nodes (malicious actors), requiring n ≥ 3f + 1 total nodes to tolerate f byzantine nodes. BFT is crucial for blockchain security as it prevents double spending, 51% attacks, and other malicious behaviors.",
    "type": "definition"
  },
  "key_concepts": [
    {
      "term": "Byzantine Fault Tolerance (BFT)",
      "definition": "A property of distributed systems that allows them to function correctly even when some components fail arbitrarily or act maliciously",
      "importance": "Fundamental for blockchain security and consensus in adversarial environments"
    },
    {
      "term": "Byzantine Generals Problem",
      "definition": "A theoretical problem illustrating the challenge of achieving consensus in distributed systems with unreliable communication and malicious participants",
      "importance": "Provides the mathematical foundation for understanding BFT requirements"
    },
    {
      "term": "Practical Byzantine Fault Tolerance (pBFT)",
      "definition": "The first efficient BFT algorithm suitable for real-world applications, requiring three phases: pre-prepare, prepare, and commit",
      "importance": "Foundation for many modern blockchain consensus mechanisms"
    },
    {
      "term": "Consensus Threshold",
      "definition": "The minimum number of honest nodes required for BFT systems: n ≥ 3f + 1, where n is total nodes and f is byzantine nodes",
      "importance": "Determines the security guarantees and attack resistance of BFT networks"
    },
    {
      "term": "Slashing Conditions",
      "definition": "Economic penalties imposed on validators who violate consensus rules or act maliciously",
      "importance": "Provides economic incentives for honest behavior in proof-of-stake systems"
    },
    {
      "term": "Casper FFG",
      "definition": "Ethereum's Friendly Finality Gadget that provides economic finality through BFT-inspired voting mechanisms",
      "importance": "Enables Ethereum's transition from proof-of-work to proof-of-stake"
    },
    {
      "term": "Gasper Consensus",
      "definition": "Ethereum's consensus mechanism combining LMD-GHOST fork choice with Casper FFG finality",
      "importance": "Secures Ethereum 2.0 and provides fast finality with economic guarantees"
    },
    {
      "term": "Nothing-at-Stake Attack",
      "definition": "Attack where validators vote for multiple competing chains without economic penalty",
      "importance": "Key attack vector that BFT systems must prevent through slashing conditions"
    }
  ],
  "faq": [
    {
      "question": "What is the difference between BFT and traditional fault tolerance?",
      "answer": "Byzantine Fault Tolerance handles arbitrary failures including malicious behavior, requiring n ≥ 3f + 1 nodes to tolerate f faults. Traditional Crash Fault Tolerance only handles nodes that stop working, needing only n ≥ 2f + 1 nodes. BFT is essential for public blockchains where malicious actors may be present.",
      "category": "basics"
    },
    {
      "question": "How does BFT prevent double spending in blockchain?",
      "answer": "BFT prevents double spending by requiring 2/3+ consensus before confirming transactions. Since conflicting transactions cannot both achieve this threshold simultaneously, double spending becomes mathematically impossible unless attackers control 67%+ of the network, which is economically prohibitive.",
      "category": "security"
    },
    {
      "question": "Why can't BFT systems tolerate 50% Byzantine nodes?",
      "answer": "The 67% threshold comes from the need to distinguish between honest and malicious responses. With 50% Byzantine nodes, honest nodes cannot determine which messages represent the true network state, making consensus impossible. The mathematical proof requires n ≥ 3f + 1.",
      "category": "mathematics"
    },
    {
      "question": "How does Ethereum's Gasper consensus work?",
      "answer": "Gasper combines LMD-GHOST fork choice (selecting the heaviest subtree based on attestations) with Casper FFG finality (checkpointing system). Validators attest to blocks, and supermajority agreement (2/3+) justifies then finalizes checkpoints, providing economic finality.",
      "category": "ethereum"
    },
    {
      "question": "What are slashing conditions in BFT systems?",
      "answer": "Slashing conditions are economic penalties for validators who violate consensus rules, such as double voting, surround voting, or being offline. Penalties can include partial stake loss and temporary jailing, creating strong incentives for honest behavior.",
      "category": "economics"
    },
    {
      "question": "Can BFT algorithms work in asynchronous networks?",
      "answer": "Pure asynchronous BFT is theoretically possible but practically challenging. Most implementations assume partial synchrony - periods where messages deliver within known bounds. This provides both theoretical guarantees and practical performance.",
      "category": "technical"
    },
    {
      "question": "What is the energy consumption of BFT vs Proof of Work?",
      "answer": "BFT consensus mechanisms are dramatically more energy-efficient than Proof of Work. Ethereum's transition to Proof of Stake (using Gasper BFT) reduced energy consumption by over 99.9% while maintaining equivalent security.",
      "category": "sustainability"
    },
    {
      "question": "How do different EVM chains implement BFT?",
      "answer": "Polygon uses Tendermint-based Heimdall for checkpointing, BSC implements Proof of Staked Authority with 21 validators, Avalanche uses Snowman consensus with unique sampling, and Arbitrum uses fraud proofs with BFT elements for dispute resolution.",
      "category": "implementation"
    },
    {
      "question": "What happens if BFT threshold is exceeded?",
      "answer": "If more than 1/3 nodes become Byzantine, the network may halt (preserving safety), fork (different states), or activate recovery procedures. Modern systems include governance mechanisms to remove malicious validators and restore consensus.",
      "category": "failure-scenarios"
    },
    {
      "question": "How do you optimize BFT performance for scale?",
      "answer": "Key optimizations include message aggregation (combining signatures), parallel processing, pipelining consensus rounds, threshold cryptography, sharding, and Layer 2 solutions. These maintain security while improving throughput and latency.",
      "category": "optimization"
    }
  ],
  "quick_answers": [
    {
      "query": "byzantine fault tolerance explained",
      "answer": "Byzantine Fault Tolerance enables distributed systems to function correctly despite malicious actors. BFT requires n ≥ 3f + 1 nodes to tolerate f byzantine nodes, ensuring consensus through multi-phase voting protocols that prevent attacks like double spending and 51% attacks.",
      "confidence": 0.97
    },
    {
      "query": "how does ethereum consensus work",
      "answer": "Ethereum uses Gasper consensus combining LMD-GHOST fork choice with Casper FFG finality. Validators stake 32 ETH, attest to blocks, and supermajority agreement (2/3+) creates justified then finalized checkpoints, providing economic security through slashing conditions.",
      "confidence": 0.95
    },
    {
      "query": "pbft algorithm phases",
      "answer": "pBFT has three phases: Pre-prepare (primary proposes block), Prepare (backups validate and vote), Commit (final confirmation). Each phase requires 2f+1 messages for n ≥ 3f+1 nodes, ensuring safety against f byzantine nodes.",
      "confidence": 0.94
    },
    {
      "query": "blockchain attack prevention",
      "answer": "BFT prevents blockchain attacks through consensus thresholds (67%+ required), economic incentives (slashing penalties), cryptographic proofs, and multi-phase validation. This makes attacks like double spending, nothing-at-stake, and long-range attacks economically infeasible.",
      "confidence": 0.93
    },
    {
      "query": "evm compatible chains consensus",
      "answer": "EVM chains use various BFT implementations: Polygon (Tendermint-based Heimdall), BSC (Proof of Staked Authority), Avalanche (Snowman consensus), Arbitrum (fraud proofs with BFT elements). All maintain Ethereum compatibility while optimizing for performance.",
      "confidence": 0.92
    }
  ],
  "related_topics": [
    {
      "topic": "Ethereum 2.0 Consensus",
      "relevance": 0.96,
      "description": "Proof of Stake implementation using Gasper consensus mechanism"
    },
    {
      "topic": "Blockchain Security",
      "relevance": 0.94,
      "description": "Cryptographic and consensus-based security mechanisms in distributed systems"
    },
    {
      "topic": "Consensus Algorithms",
      "relevance": 0.93,
      "description": "Various approaches to achieving agreement in distributed systems"
    },
    {
      "topic": "Distributed Systems",
      "relevance": 0.90,
      "description": "Computer systems with components on networked computers that coordinate through message passing"
    },
    {
      "topic": "Proof of Stake",
      "relevance": 0.95,
      "description": "Consensus mechanism where validators are chosen based on their stake in the network"
    },
    {
      "topic": "Blockchain Scalability",
      "relevance": 0.88,
      "description": "Techniques and approaches to improve blockchain throughput and performance"
    },
    {
      "topic": "Smart Contract Security",
      "relevance": 0.85,
      "description": "Security considerations and best practices for smart contract development"
    },
    {
      "topic": "Validator Economics",
      "relevance": 0.89,
      "description": "Economic incentives and penalties in proof-of-stake systems"
    },
    {
      "topic": "Layer 2 Solutions",
      "relevance": 0.82,
      "description": "Scaling solutions that operate on top of base blockchain layers"
    },
    {
      "topic": "Cross-Chain Protocols",
      "relevance": 0.80,
      "description": "Protocols enabling interoperability between different blockchain networks"
    }
  ],
  "entities": [
    {
      "name": "Ethereum",
      "type": "Blockchain",
      "description": "Leading smart contract platform using Gasper BFT consensus",
      "importance": "high"
    },
    {
      "name": "Vitalik Buterin",
      "type": "Person",
      "description": "Ethereum founder who contributed to Casper consensus development",
      "importance": "high"
    },
    {
      "name": "Leslie Lamport",
      "type": "Person",
      "description": "Computer scientist who formalized the Byzantine Generals Problem",
      "importance": "high"
    },
    {
      "name": "Castro and Liskov",
      "type": "Researchers",
      "description": "Developers of the Practical Byzantine Fault Tolerance (pBFT) algorithm",
      "importance": "high"
    },
    {
      "name": "Polygon",
      "type": "Blockchain",
      "description": "EVM-compatible chain using Tendermint-based BFT consensus",
      "importance": "medium"
    },
    {
      "name": "Binance Smart Chain",
      "type": "Blockchain",
      "description": "EVM-compatible chain using Proof of Staked Authority with BFT elements",
      "importance": "medium"
    },
    {
      "name": "Avalanche",
      "type": "Blockchain",
      "description": "Blockchain platform using Snowman consensus protocol",
      "importance": "medium"
    },
    {
      "name": "Tendermint",
      "type": "Consensus Algorithm",
      "description": "BFT consensus algorithm used in Cosmos ecosystem",
      "importance": "medium"
    },
    {
      "name": "HotStuff",
      "type": "Consensus Algorithm", 
      "description": "Linear communication complexity BFT algorithm",
      "importance": "medium"
    },
    {
      "name": "Solana",
      "type": "Blockchain",
      "description": "High-performance blockchain using Tower BFT consensus",
      "importance": "medium"
    }
  ],
  "readability": {
    "grade_level": "College level",
    "reading_ease": "Moderate to Difficult",
    "sentence_complexity": "Medium to High",
    "technical_density": "High"
  },
  "content_structure": {
    "type": "Comprehensive Technical Guide",
    "sections": 15,
    "word_count": 12500,
    "has_toc": true,
    "has_faq": true,
    "has_examples": true,
    "has_diagrams": true,
    "has_code_samples": false,
    "has_comparisons": true,
    "has_case_studies": true
  },
  "optimization_score": {
    "seo_score": 98,
    "aeo_score": 96,
    "user_experience": 95,
    "technical_accuracy": 97,
    "comprehensiveness": 98
  },
  "target_audience": [
    "Blockchain developers",
    "Distributed systems researchers",
    "Cryptocurrency enthusiasts",
    "Ethereum developers",
    "Security engineers",
    "Academic researchers",
    "Blockchain architects",
    "DeFi developers",
    "Consensus protocol designers",
    "Blockchain security auditors"
  ],
  "content_goals": [
    "Explain BFT fundamentals comprehensively",
    "Detail Ethereum's consensus implementation",
    "Compare different BFT algorithms",
    "Analyze security properties and attack vectors",
    "Demonstrate real-world implementations",
    "Provide practical implementation guidance",
    "Address scalability and performance considerations",
    "Cover EVM-compatible chain implementations"
  ],
  "sources": [
    {
      "title": "The Byzantine Generals Problem",
      "url": "https://www.microsoft.com/en-us/research/uploads/prod/2016/12/The-Byzantine-Generals-Problem.pdf",
      "type": "Research Paper",
      "credibility": "Academic"
    },
    {
      "title": "Practical Byzantine Fault Tolerance",
      "url": "https://pmg.csail.mit.edu/papers/osdi99.pdf",
      "type": "Research Paper",
      "credibility": "Academic"
    },
    {
      "title": "Casper the Friendly Finality Gadget",
      "url": "https://arxiv.org/abs/1710.09437",
      "type": "Research Paper",
      "credibility": "Academic"
    },
    {
      "title": "Gasper: Combining GHOST and Casper",
      "url": "https://arxiv.org/abs/2003.03052",
      "type": "Research Paper",
      "credibility": "Academic"
    },
    {
      "title": "Ethereum 2.0 Specification",
      "url": "https://github.com/ethereum/consensus-specs",
      "type": "Technical Specification",
      "credibility": "Official"
    },
    {
      "title": "Tendermint: Consensus without Mining",
      "url": "https://tendermint.com/static/docs/tendermint.pdf",
      "type": "Technical Paper",
      "credibility": "Official"
    },
    {
      "title": "HotStuff: BFT Consensus with Linearity and Responsiveness",
      "url": "https://arxiv.org/abs/1803.05069",
      "type": "Research Paper",
      "credibility": "Academic"
    }
  ],  
  "citation": [
    {
      "@type": "WebPage",
      "name": "Byzantine Generals Problem - Microsoft Research",
      "@id": "https://www.microsoft.com/en-us/research/uploads/prod/2016/12/The-Byzantine-Generals-Problem.pdf",
      "description": "Original paper by Lamport, Shostak, and Pease defining the Byzantine Generals Problem and its solutions",
      "relatedLink": [
        "https://lamport.azurewebsites.net/pubs/byz.pdf",
        "https://groups.csail.mit.edu/tds/papers/Lynch/jacm88.pdf"
      ]
    },
    {
      "@type": "WebPage",
      "name": "Practical Byzantine Fault Tolerance - MIT",
      "@id": "https://pmg.csail.mit.edu/papers/osdi99.pdf",
      "description": "Seminal paper by Castro and Liskov introducing the first practical BFT algorithm",
      "relatedLink": [
        "https://pmg.csail.mit.edu/bft/",
        "https://www.usenix.org/legacy/events/osdi99/full_papers/castro/castro.pdf"
      ]
    },
    {
      "@type": "WebPage",
      "name": "Ethereum Gasper Consensus",
      "@id": "https://arxiv.org/abs/2003.03052",
      "description": "Technical specification of Ethereum's Gasper consensus combining LMD-GHOST and Casper FFG",
      "relatedLink": [
        "https://ethereum.org/en/developers/docs/consensus-mechanisms/pos/gasper/",
        "https://github.com/ethereum/consensus-specs"
      ]
    },
    {
      "@type": "WebPage",
      "name": "Tendermint Consensus Algorithm",
      "@id": "https://tendermint.com/static/docs/tendermint.pdf",
      "description": "BFT consensus algorithm powering the Cosmos ecosystem",
      "relatedLink": [
        "https://docs.tendermint.com/master/introduction/what-is-tendermint.html",
        "https://cosmos.network/intro/"
      ]
    }
  ],
  "hasPart": [
    {
      "@type": "WebPageElement",
      "name": "What is Byzantine Fault Tolerance (BFT)?",
      "url": "https://shapkarin.me/articles/byzantine-fault-tolerance#what-is-byzantine-fault-tolerance-bft",
      "description": "Introduction to BFT concepts, importance in blockchain, and key properties",
      "order": 1
    },
    {
      "@type": "WebPageElement", 
      "name": "The Byzantine Generals Problem Explained",
      "url": "https://shapkarin.me/articles/byzantine-fault-tolerance#the-byzantine-generals-problem-explained",
      "description": "Historical background and mathematical foundation of the Byzantine Generals Problem",
      "order": 2
    },
    {
      "@type": "WebPageElement",
      "name": "BFT vs Traditional Fault Tolerance",
      "url": "https://shapkarin.me/articles/byzantine-fault-tolerance#bft-vs-traditional-fault-tolerance",
      "description": "Comparison between Byzantine and crash fault tolerance approaches",
      "order": 3
    },
    {
      "@type": "WebPageElement",
      "name": "How BFT Works in Blockchain Networks",
      "url": "https://shapkarin.me/articles/byzantine-fault-tolerance#how-bft-works-in-blockchain-networks",
      "description": "Multi-phase consensus process and core BFT components in blockchain systems",
      "order": 4
    },
    {
      "@type": "WebPageElement",
      "name": "Practical Byzantine Fault Tolerance (pBFT)",
      "url": "https://shapkarin.me/articles/byzantine-fault-tolerance#practical-byzantine-fault-tolerance-pbft",
      "description": "Detailed explanation of pBFT algorithm phases and properties",
      "order": 5
    },
    {
      "@type": "WebPageElement",
      "name": "BFT in Ethereum: Casper FFG and Gasper",
      "url": "https://shapkarin.me/articles/byzantine-fault-tolerance#bft-in-ethereum-casper-ffg-and-gasper",
      "description": "Ethereum's implementation of BFT through Casper FFG and Gasper consensus",
      "order": 6
    },
    {
      "@type": "WebPageElement",
      "name": "BFT Implementations in EVM-Compatible Chains",
      "url": "https://shapkarin.me/articles/byzantine-fault-tolerance#bft-implementations-in-evm-compatible-chains",
      "description": "BFT consensus mechanisms in Polygon, BSC, Avalanche, and other EVM chains",
      "order": 7
    },
    {
      "@type": "WebPageElement",
      "name": "Types of Byzantine Faults and Attacks",
      "url": "https://shapkarin.me/articles/byzantine-fault-tolerance#types-of-byzantine-faults-and-attacks",
      "description": "Analysis of various attack vectors and BFT defense mechanisms",
      "order": 8
    },
    {
      "@type": "WebPageElement",
      "name": "BFT Consensus Algorithms Comparison",
      "url": "https://shapkarin.me/articles/byzantine-fault-tolerance#bft-consensus-algorithms-comparison",
      "description": "Comparative analysis of different BFT algorithms and their trade-offs",
      "order": 9
    },
    {
      "@type": "WebPageElement",
      "name": "Performance and Scalability Considerations",
      "url": "https://shapkarin.me/articles/byzantine-fault-tolerance#performance-and-scalability-considerations",
      "description": "BFT performance limitations, optimization strategies, and real-world metrics",
      "order": 10
    },
    {
      "@type": "WebPageElement",
      "name": "Security Analysis and Attack Vectors",
      "url": "https://shapkarin.me/articles/byzantine-fault-tolerance#security-analysis-and-attack-vectors",
      "description": "Comprehensive security analysis including attack costs and advanced scenarios",
      "order": 11
    },
    {
      "@type": "WebPageElement",
      "name": "Real-World BFT Implementations",
      "url": "https://shapkarin.me/articles/byzantine-fault-tolerance#real-world-bft-implementations",
      "description": "Case studies of successful BFT deployments in Ethereum 2.0 and Cosmos",
      "order": 12
    },
    {
      "@type": "WebPageElement",
      "name": "Future of BFT in Blockchain",
      "url": "https://shapkarin.me/articles/byzantine-fault-tolerance#future-of-bft-in-blockchain",
      "description": "Emerging trends, research directions, and next-generation BFT algorithms",
      "order": 13
    },
    {
      "@type": "WebPageElement",
      "name": "Best Practices for BFT Implementation",
      "url": "https://shapkarin.me/articles/byzantine-fault-tolerance#best-practices-for-bft-implementation",
      "description": "Design principles, security practices, and operational considerations",
      "order": 14
    },
    {
      "@type": "WebPageElement",
      "name": "Frequently Asked Questions",
      "url": "https://shapkarin.me/articles/byzantine-fault-tolerance#frequently-asked-questions",
      "description": "Common questions about BFT implementation, security, and performance",
      "order": 15
    }
  ],
  "last_updated": "2025-01-27T00:00:00Z",
  "version": "1.0"
  }
] 